#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    https://shiny.posit.co/
#

library(shiny)
library('vcd') 
library(bslib)
library(plotly)
library(dplyr)
library(corrplot)
library(ggplot2)
library(shinythemes)
library(DT)
source("DatosSeleccionados2.R")
library(shinyjs)

# Define UI for application that draws a histogram
ui <- fluidPage(
  useShinyjs(),  # Para usar shinyjs para manejar interacciones
  theme = bs_theme(preset = "flatly",
                   #bg = "#C0C0C0",
                   #fg = "#111"
                   ),
  sidebarLayout(position = "left",
                sidebarPanel( width=2,
                              img(src = "LogoUnal.png", height=50,width=110, align="center"),
                              br(),
                              br(),
                              h4("Análisis descriptivo ENPOL 2021"),
                              hr(),
                              br(),
                              accordion(open=F,
                                accordion_panel(
                                  "Resumen",
                                  HTML(
                                    "<p>&#8226; Resumen</p>"
                                  ),
                                )
                              ),
                              accordion(open = F,
                                accordion_panel(
                                  "Marco Conceptual",
                                  HTML(
                                    "<p>&#8226; Marco de Antecedentes</p>
                                <p>&#8226; Objetivos y Justificación</p>
                                 <p>&#8226; Descripción de los datos</p>"

                                  )
                                )
                              ),
                              accordion(open = F,
                                accordion_panel(
                                  "Análisis Descriptivo",
                                  HTML(
                                    "<p>&#8226; Análisis Descriptivo Univariado</p>
                                <p>&#8226; Análisis Descriptivo Bivariado </p>
                                 <p>&#8226; Análisis de Componentes Principales (PCA)</p>"
                                  )
                                )
                              ),
                              accordion(open = F,
                                accordion_panel("Sobre nosotros",
                                                HTML(
                                                  "<p>&#8226; Sobre Nosotros</p> "
                                                )
                                                )
                              )
  
  
  ),
  #theme = shinytheme("cosmo"),
  mainPanel(width=10,
            br(),
            h1("Análisis descriptivo bivariado de las variables.",  align = "center"),
  tabsetPanel(
  tabPanel("Cuantitativa y Cuantitativa" ,
            layout_columns(
    card(card_header("Diagrama de dispersión"),
         plotOutput("scatterplot")),
    layout_columns(
      #card(card_header("Selección de variables"),
           wellPanel("Selecciona las variables",
                     selectInput("var1_cuanti_cuanti", "Variable cuantitativa 1:", choices = varCuantitativas),
                     selectInput("var2_cuanti_cuanti", "Variable cuantitativa 2:", choices = varCuantitativas)
           ),
           #),
      card(card_header("Correlación entre las variables"),
           plotOutput("correlacion",height = "70%")),
      col_widths = c(12, 12)
    )
  ),
  card(card_header("Comentarios"))
  ),
  tabPanel("Cuantitativa y Cualitativa",
           layout_columns(
             card(card_header("Diagrama de caja"),
                  plotOutput("boxplot")),
             layout_columns(
               wellPanel("Selecciona las variables",
                         selectInput("var1_cuali_cuanti", "Variable cualitativa:", choices = varCualitativas),
                         selectInput("var2_cuali_cuanti", "Variable cuantitativa:", choices = varCuantitativas)
               ),
               card(card_header("Densidad por categorias"),
                    plotOutput("densidades",height = "70%")),
               col_widths = c(12, 12)
             )
           ),
  card(card_header("Comentarios"))
  ),
  tabPanel("Cualitativa y Cualitativa",
           layout_columns(
             card(card_header("Distribución"),
                  plotOutput("perfiles")),
             layout_columns(
               wellPanel("Selecciona las variables",
                         selectInput("var1_cuali_cuali", "Variable cualitativa 1:", choices = varCualitativas),
                         selectInput("var2_cuali_cuali", "Variable cualitativa 2:", choices = varCualitativas)
               ),
               card(card_header("Tabla de contingencia"),
                    plotOutput("contingencia")),
               col_widths = c(12, 12)
             )
           ),
           card(card_header("Comentarios"))
           ,)
  ),
  
)
)
)





# Define server logic para la aplicación
server <- function(input, output) {
  #bs_themer()
  # Gráfico Cualitativa vs Cuantitativa
  output$boxplot <- renderPlot({
    ggplot(Tabla1, aes_string(x = input$var1_cuali_cuanti, y = input$var2_cuali_cuanti,fill=input$var1_cuali_cuanti)) +
      geom_boxplot() + coord_flip()+
      labs(x = input$var1_cuali_cuanti, y = input$var2_cuali_cuanti) +
      theme_minimal()
  })
  
  output$scatterplot <-renderPlot({
    ggplot(Tabla1, aes_string(x = input$var1_cuanti_cuanti, y = input$var2_cuanti_cuanti)) +
      geom_point() +
      labs(x = input$var1_cuanti_cuanti, y = input$var2_cuanti_cuanti) +
      theme_bw()
  })
  
  output$perfiles<-renderPlot({
      var1 <- sym(input$var1_cuali_cuali)
      var2 <- sym(input$var2_cuali_cuali)
      
      Tabla1 %>%
        group_by(!!var1, !!var2) %>%
        summarize(prop = n()) %>%
        ungroup() %>%
        ggplot(aes_string(y = input$var1_cuali_cuali, x = "prop", fill = input$var2_cuali_cuali)) +
        geom_col(position = "fill") +
        labs(fill = "", y = "", x = "Proporción") +
        scale_x_continuous(labels = percent) +
        theme_minimal()
  })
  
  output$densidades<-renderPlot({
    ggplot(Tabla1, aes_string(x = input$var2_cuali_cuanti, fill = input$var1_cuali_cuanti)) +
      geom_density(alpha = 0.5) +
      labs(x = as.character(input$var2_cuali_cuanti),
           y = "Densidad") +
      theme_minimal()
  })
  
  output$correlacion<-renderPlot({
    corrplot(cor(Tabla1[c(input$var1_cuanti_cuanti,input$var2_cuanti_cuanti)]),method = "color",type="upper",tl.srt = 15)
    })
  
  output$contingencia<-renderPlot({
    var1 <- input$var1_cuali_cuali
    var2 <- input$var2_cuali_cuali
    
    # Filtrar valores ausentes y asegurar que las variables son factores
    data <- Tabla1 %>%
      filter(!is.na(.[[var1]]), !is.na(.[[var2]])) %>%
      mutate(across(all_of(var1), as.factor)) %>%
      mutate(across(all_of(var2), as.factor))
    
    # Crear la tabla de contingencia y el gráfico de mosaico
    contingency_table <- table(data[[var1]], data[[var2]])
    mosaicplot(contingency_table, shade = TRUE)
    #contingency_table
    })
}

# Corre la aplicación Shiny
shinyApp(ui = ui, server = server)
