"0","#| label: funcion-interactive"
"0","#| echo: false"
"0","#| warning: false"
"0","#| output: false"
"0","#Z <- as.matrix(Z)"
"0","#(B <- t(Z) %*% Z)"
"0",""
"0",""
"0","fviz_mca_var_interactive <- function(acm, axes = c(1, 2), repel = TRUE, ggtheme = theme_minimal(),"
"0","                                     col.var = ""blue"", gradient.cols = NULL) {"
"0","  "
"0","  # Calcula la varianza explicada para los ejes seleccionados"
"0","  eigenvalues <- acm$eig"
"0","  var_explained_x <- round(eigenvalues[axes[1], 2], 2)"
"0","  var_explained_y <- round(eigenvalues[axes[2], 2], 2)"
"0","  "
"0","  # Extrae las coordenadas y nombres de las variables (categorías)"
"0","  var_data <- acm$var$coord"
"0","  var_data_df <- data.frame(var_data)"
"0","  var_data_df$Variable <- rownames(var_data_df)"
"0","  "
"0","  # Añade la columna correspondiente al color si se usa col.var como en la función original"
"0"," if (col.var == ""cos2"") {"
"0","    var_data_df$Color <- get_mca_var(acm)$cos2[, axes[1]]"
"0","    "
"0","    p <- ggplot(var_data_df, aes(x = !!sym(colnames(var_data_df)[axes[1]]), "
"0","                                 y = !!sym(colnames(var_data_df)[axes[2]]), "
"0","                                 text = Variable, color = Color)) +"
"0","      geom_point(size = 0.75, shape = 25, fill = ""red"") +  # Aquí removemos 'color = ""red""'"
"0","      theme_minimal() +"
"0","      scale_color_gradientn(colors = gradient.cols) +  # Aplica el gradiente de colores"
"0","      labs(x = paste0(""Dim "", axes[1], "" ("", var_explained_x, ""%)""),"
"0","           y = paste0(""Dim "", axes[2], "" ("", var_explained_y, ""%)""))"
"0","} else {"
"0","    # Usa un color fijo si no se especifica un gradiente"
"0","    p <- ggplot(var_data_df, aes(x = !!sym(colnames(var_data_df)[axes[1]]), "
"0","                                 y = !!sym(colnames(var_data_df)[axes[2]]), "
"0","                                 text = Variable)) +"
"0","      geom_point(size = 0.75, shape = 25, color = ""red"", fill = ""red"") +"
"0","      theme_minimal() +"
"0","      labs(x = paste0(""Dim "", axes[1], "" ("", var_explained_x, ""%)""),"
"0","           y = paste0(""Dim "", axes[2], "" ("", var_explained_y, ""%)""))"
"0","  }"
"0","  "
"0","  # Agrega las líneas punteadas centradas en el plano cartesiano"
"0","  p <- p + "
"0","    geom_hline(yintercept = 0, linetype = ""dashed"", color = ""gray"") + "
"0","    geom_vline(xintercept = 0, linetype = ""dashed"", color = ""gray"")"
"0","  "
"0","  # Conviértelo en un gráfico interactivo con plotly"
"0","  plotly_obj <- ggplotly(p, tooltip = ""text"")"
"0","  "
"0","  # Retorna el gráfico interactivo"
"0","  return(plotly_obj)"
"0","}"
"0",""
"0",""
