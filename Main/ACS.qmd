---
title: "Análisis de Correspondencias Simples"
format: html
editor: visual
---

```{r}
#| label: carga-librerias
#| message: false
#| echo: false
#| output: false

#Manejo de datos
library(tidyverse)
library(readr)
library(dplyr)
library(readxl)
#Gráficos
library(ggplot2)
library(gridExtra)
library(plotly)
library(GGally)
#ACP
library(ade4)
library(FactoClass)
library(FactoMineR)
library(factoextra)
#Datos importados
source("DatosSeleccionados.R")

#Ajustes de tema del documento y graficos
library(scales)
library(DT)
library(gt)
library(RColorBrewer)
theme_set(theme_minimal(base_size = 24, base_family = "Atkinson Hyperlegible"))
library(hrbrthemes)
options(scipen=999)
```

Convertimos alguas variables en categóricas mediante discretización
```{r}
#| label: Seleccion-variables
#| echo: false
#| warning: false
#| output: false
#http://www.sthda.com/english/articles/31-principal-component-methods-in-r-practical-guide/112-pca-principal-component-analysis-essentials/#r-packages
#Escogemos las variables cuantitativas
varCualitativas<-c("TIPO_CARCEL","EST_CIVIL","NIVEL_ESCOLARIDAD","PARO_ESTUDIOS","ORIENT_SEXUAL","DISC_MOTRIZ","COLOR_PIEL","CARCEL_LECTURA","CARCEL_EJERCICIO","CELDA_ALIMENTOS","CELDA_SERVICIO_MEDICO","CELDA_DUCHA","DECLARACION_CULPABLE","CATEGORIAS_TIEMPO_RECLUIDO","CATEGORIAS_TIEMPO_PROCESO","CAR_PERSONAS_CELDA")


#DatosCuantitativos<-Tabla1[,varCuantitativas]
DatosCualitativos<-Tabla1[,varCualitativas]
#correlaciones<-cor(DatosCuantitativos)
```

# ACM de nuestro objetivo
```{r}
#| label: Tabla-disyuntiva-completa1
#| echo: false
#| warning: false
#| output: false
DatosCualitativos <- data.frame(lapply(DatosCualitativos, as.factor))

Z <- acm.disjonctif(DatosCualitativos) # función de ade4
```

```{r}
#| label: Tabla-disyuntiva-completa-visualizacion
#| echo: false
#| warning: false
#| output: true

Z |> head(n=5) |>
  datatable(
    options = list(dom = 'ftp', paging = TRUE)
    )
```


```{r}
#| label: funcion-interactive
#| echo: false
#| warning: false
#| output: false
#Z <- as.matrix(Z)
#(B <- t(Z) %*% Z)


fviz_mca_var_interactive <- function(acm, axes = c(1, 2), repel = TRUE, ggtheme = theme_minimal(),
                                     col.var = "blue", gradient.cols = NULL) {
  
  # Calcula la varianza explicada para los ejes seleccionados
  eigenvalues <- acm$eig
  var_explained_x <- round(eigenvalues[axes[1], 2], 2)
  var_explained_y <- round(eigenvalues[axes[2], 2], 2)
  
  # Extrae las coordenadas y nombres de las variables (categorías)
  var_data <- acm$var$coord
  var_data_df <- data.frame(var_data)
  var_data_df$Variable <- rownames(var_data_df)
  
  # Añade la columna correspondiente al color si se usa col.var como en la función original
 if (col.var == "cos2") {
    var_data_df$Color <- get_mca_var(acm)$cos2[, axes[1]]
    
    p <- ggplot(var_data_df, aes(x = !!sym(colnames(var_data_df)[axes[1]]), 
                                 y = !!sym(colnames(var_data_df)[axes[2]]), 
                                 text = Variable, color = Color)) +
      geom_point(size = 0.75, shape = 25, fill = "red") +  # Aquí removemos 'color = "red"'
      theme_minimal() +
      scale_color_gradientn(colors = gradient.cols) +  # Aplica el gradiente de colores
      labs(x = paste0("Dim ", axes[1], " (", var_explained_x, "%)"),
           y = paste0("Dim ", axes[2], " (", var_explained_y, "%)"))
} else {
    # Usa un color fijo si no se especifica un gradiente
    p <- ggplot(var_data_df, aes(x = !!sym(colnames(var_data_df)[axes[1]]), 
                                 y = !!sym(colnames(var_data_df)[axes[2]]), 
                                 text = Variable)) +
      geom_point(size = 0.75, shape = 25, color = "red", fill = "red") +
      theme_minimal() +
      labs(x = paste0("Dim ", axes[1], " (", var_explained_x, "%)"),
           y = paste0("Dim ", axes[2], " (", var_explained_y, "%)"))
  }
  
  # Agrega las líneas punteadas centradas en el plano cartesiano
  p <- p + 
    geom_hline(yintercept = 0, linetype = "dashed", color = "gray") + 
    geom_vline(xintercept = 0, linetype = "dashed", color = "gray")
  
  # Conviértelo en un gráfico interactivo con plotly
  plotly_obj <- ggplotly(p, tooltip = "text")
  
  # Retorna el gráfico interactivo
  return(plotly_obj)
}


```

```{r}
#| label: MCA1
#| echo: true
#| output: false
acm <- MCA(DatosCualitativos, graph=FALSE)

acm_ventil<-MCA(DatosCualitativos,graph = FALSE,level.ventil = 0.01)
```

gh


### Proyección de los individuos en los planos factoriales
::: panel-tabset
#### Ejes 1-2
```{r}
#| fig-cap: ''
#| fig-align: 'center'
#| fig-width: 5.5
#| fig-height: 5
#| echo: false
fviz_mca_ind(acm, axes=c(1,3), geom="point", asp=1, col.ind = "cos2",ggtheme=theme_minimal())


```
#### Ejes 2-3
```{r}
#| fig-cap: ''
#| fig-align: 'center'
#| fig-width: 5.5
#| fig-height: 5
#| echo: false
fviz_mca_ind(acm, axes=c(2,3), geom="point", col.ind = "cos2",ggtheme=theme_minimal())
```

#### Ejes 1-3
```{r}
#| fig-cap: ''
#| fig-align: 'center'
#| fig-width: 5.5
#| fig-height: 5
#| echo: false
fviz_mca_ind(acm, axes=c(1,3), geom="point", col.ind = "cos2",ggtheme=theme_minimal())
```


:::
### Proyección de las variables en los planos factoriales
::: panel-tabset
#### Ejes 1-2
```{r}
#| fig-cap: ''
#| fig-align: 'center'
#| fig-width: 5.5
#| fig-height: 5
#| echo: false
fviz_mca_var_interactive(acm, axes=c(1,2), repel = TRUE,col.var = "cos2", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"), ggtheme=theme_minimal())


```


#### Ejes 2-3


```{r}
#| fig-cap: ''
#| fig-align: 'center'
#| fig-width: 5.5
#| fig-height: 5
#| echo: false
fviz_mca_var_interactive(acm, axes=c(2,3), repel = TRUE, col.var = "cos2", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),ggtheme=theme_minimal())
```

#### Ejes 1-3
```{r}
#| fig-cap: ''
#| fig-align: 'center'
#| fig-width: 5.5
#| fig-height: 5
#| echo: false
fviz_mca_var_interactive(acm, axes=c(1,3), repel = TRUE,col.var = "cos2", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"), ggtheme=theme_minimal())
```

:::

### Análisis de los ejes
::: panel-tabset
#### Valores propios
```{r}
#| label: screeplot1
#| echo: false
#| output: true
screeplot <- fviz_screeplot(acm, addlabels = TRUE, ylim = c(0, 20)) +  ggtitle("Scree Plot") + theme_minimal()+ylab("Porcentaje de varianza explicada")+xlab("Ejes")
## Usando modif.rate() del paquete GDAtools:
# ptau <- modif.rate(acm)$modif[, 1]
## Haciendo las cuentas uno mismo:
s <- ncol(DatosCualitativos)
l <- acm$eig[acm$eig[,1] > 1/s, 1]
tau <- ( s / (s - 1) )^2 * ( l - (1/s) )^2
ptau <- tau / sum( tau ) * 100

# Creamos un data frame para usar con ggplot2
barplot_df <- data.frame(Indice = factor(1:length(ptau)), Valor = ptau)

# Creamos el gráfico de barras con ggplot2
barplot_gg <- ggplot(barplot_df, aes(x = Indice, y = Valor)) +
  geom_bar(stat = "identity", fill = "darkred") +
  ylim(0, max(barplot_df$Valor+10)) +
  labs(x = "Ejes", y = expression(tau(lambda))) +
  theme_minimal() +
  ggtitle("Criterio de Benzécri")

grid.arrange(screeplot, barplot_gg, ncol = 1)
```
#### Contribución 1er eje
```{r}
#| label: contribacm1
#| echo: false
#| output: true
contrib <- fviz_contrib(acm, choice = "var", axes = 1) +
  theme(axis.text.x = element_text(size = 6, angle = 90, hjust = 1))
contrib<-contrib+theme(axis.text.x = element_text(size =4, angle = 90, hjust = 1))
# Convierte el gráfico de ggplot a plotly
contrib_plotly <- ggplotly(contrib)

contrib_plotly
```
#### Contribución 2do eje
```{r}
#| label: contribacm2
#| echo: false
#| output: true
contrib<-fviz_contrib(acm, choice = "var", axes = 2)
contrib<-contrib+theme(axis.text.x = element_text(size =3.5, angle = 90, hjust = 1))

contrib_plotly <- ggplotly(contrib)

contrib_plotly
```
#### Contribución 3er eje
```{r}
#| label: contribacm3
#| echo: false
#| output: true

contrib<-fviz_contrib(acm, choice = "var", axes = 3)
contrib<-contrib+theme(axis.text.x = element_text(size =3.5, angle = 90, hjust = 1))

contrib_plotly <- ggplotly(contrib)

contrib_plotly
```

:::

### Contribución de cada variable

::: panel-tabset
#### Ejes 1-2
```{r}
#| label: contribucion-correlacion
#| echo: false
#| warning: false
#| output: true

# Crear el gráfico ggplot
gg <- ggplot(data = acm$var$eta2, aes(x = !!sym("Dim 1"), y = !!sym("Dim 2"), label = rownames(acm$var$eta2), text = rownames(acm$var$eta2))) +
  geom_point(size=0.75,shape=75,colour="blue3") +  # Añadir los puntos
  geom_text_repel(aes(label = rownames(acm$var$eta2)), size = 3) +  # Añadir las etiquetas
  theme_minimal() +  # Aplicar un tema minimalista
  labs(title = "MCA - Correlación de variables", 
       x = "Dim 1", y = "Dim 2")  # Añadir títulos y

# Convertir el gráfico ggplot a plotly y mostrar el nombre de la variable al pasar el mouse
ggplotly(gg, tooltip = "text")

```

#### Ejes 2-3
```{r}
#| label: contribucion-correlacion2
#| echo: false
#| warning: false
#| output: true

# Crear el gráfico ggplot
gg <- ggplot(data = acm$var$eta2, aes(x = !!sym("Dim 2"), y = !!sym("Dim 3"), label = rownames(acm$var$eta2), text = rownames(acm$var$eta2))) +
  geom_point(size=0.75,shape=75,colour="blue3") +  # Añadir los puntos
  geom_text_repel(aes(label = rownames(acm$var$eta2)), size = 3) +  # Añadir las etiquetas
  theme_minimal() +  # Aplicar un tema minimalista
  labs(title = "MCA - Correlación de variables", 
       x = "Dim 2", y = "Dim 3")  # Añadir títulos y etiquetas

# Convertir el gráfico ggplot a plotly y mostrar el nombre de la variable al pasar el mouse
ggplotly(gg, tooltip = "text")

```

#### Ejes 1-3
```{r}
#| label: contribucion-correlacion3
#| echo: false
#| warning: false
#| output: true
gg <- ggplot(data = acm$var$eta2, aes(x = !!sym("Dim 1"), y = !!sym("Dim 3"), label = rownames(acm$var$eta2), text = rownames(acm$var$eta2))) +
  geom_point(size=0.75,shape=75,colour="blue3") +  # Añadir los puntos
  geom_text_repel(aes(label = rownames(acm$var$eta2)), size = 3) +  # Añadir las etiquetas
  theme_minimal() +  # Aplicar un tema minimalista
  labs(title = "MCA - Correlación de variables", 
       x = "Dim 1", y = "Dim 3")  # Añadir títulos y
# Convertir el gráfico ggplot a plotly y mostrar el nombre de la variable al pasar el mouse
ggplotly(gg, tooltip = "text")

```
:::

# ACM con categorías ventiladas 
### Proyección de los individuos en los planos factoriales
::: panel-tabset
#### Ejes 1-2
```{r}
#| fig-cap: ''
#| fig-align: 'center'
#| fig-width: 5.5
#| fig-height: 5
#| echo: false
fviz_mca_ind(acm_ventil, axes=c(1,3), geom="point", asp=1, col.ind = "cos2",ggtheme=theme_minimal())


```
#### Ejes 2-3
```{r}
#| fig-cap: ''
#| fig-align: 'center'
#| fig-width: 5.5
#| fig-height: 5
#| echo: false
fviz_mca_ind(acm_ventil, axes=c(2,3), geom="point", col.ind = "cos2",ggtheme=theme_minimal())
```

#### Ejes 1-3
```{r}
#| fig-cap: ''
#| fig-align: 'center'
#| fig-width: 5.5
#| fig-height: 5
#| echo: false
fviz_mca_ind(acm_ventil, axes=c(1,3), geom="point", col.ind = "cos2",ggtheme=theme_minimal())
```


:::
### Proyección de las variables en los planos factoriales
::: panel-tabset
#### Ejes 1-2
```{r}
#| fig-cap: ''
#| fig-align: 'center'
#| fig-width: 5.5
#| fig-height: 5
#| echo: false
fviz_mca_var_interactive(acm_ventil, axes=c(1,2), repel = TRUE,col.var = "cos2", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"), ggtheme=theme_minimal())


```


#### Ejes 2-3


```{r}
#| fig-cap: ''
#| fig-align: 'center'
#| fig-width: 5.5
#| fig-height: 5
#| echo: false
fviz_mca_var_interactive(acm_ventil, axes=c(2,3), repel = TRUE, col.var = "cos2", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),ggtheme=theme_minimal())
```

#### Ejes 1-3
```{r}
#| fig-cap: ''
#| fig-align: 'center'
#| fig-width: 5.5
#| fig-height: 5
#| echo: false
fviz_mca_var_interactive(acm_ventil, axes=c(1,3), repel = TRUE,col.var = "cos2", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"), ggtheme=theme_minimal())
```

:::

### Análisis de los ejes
::: panel-tabset
#### Valores propios
```{r}
#| label: screeplot1_ventil
#| echo: false
#| output: true
screeplot <- fviz_screeplot(acm_ventil, addlabels = TRUE, ylim = c(0, 20)) +  ggtitle("Scree Plot") + theme_minimal()+ylab("Porcentaje de varianza explicada")+xlab("Ejes")
## Usando modif.rate() del paquete GDAtools:
# ptau <- modif.rate(acm)$modif[, 1]
## Haciendo las cuentas uno mismo:
s <- ncol(DatosCualitativos)
l <- acm_ventil$eig[acm_ventil$eig[,1] > 1/s, 1]
tau <- ( s / (s - 1) )^2 * ( l - (1/s) )^2
ptau <- tau / sum( tau ) * 100

# Creamos un data frame para usar con ggplot2
barplot_df <- data.frame(Indice = factor(1:length(ptau)), Valor = ptau)

# Creamos el gráfico de barras con ggplot2
barplot_gg <- ggplot(barplot_df, aes(x = Indice, y = Valor)) +
  geom_bar(stat = "identity", fill = "darkred") +
  ylim(0, max(barplot_df$Valor+10)) +
  labs(x = "Ejes", y = expression(tau(lambda))) +
  theme_minimal() +
  ggtitle("Criterio de Benzécri")

grid.arrange(screeplot, barplot_gg, ncol = 1)
```
#### Contribución 1er eje
```{r}
#| label: contribacm1_ventil
#| echo: false
#| output: true
contrib <- fviz_contrib(acm_ventil, choice = "var", axes = 1) +
  theme(axis.text.x = element_text(size = 6, angle = 90, hjust = 1))
contrib<-contrib+theme(axis.text.x = element_text(size =4, angle = 90, hjust = 1))
# Convierte el gráfico de ggplot a plotly
contrib_plotly <- ggplotly(contrib)

contrib_plotly
```
#### Contribución 2do eje
```{r}
#| label: contribacm2_ventil
#| echo: false
#| output: true
contrib<-fviz_contrib(acm_ventil, choice = "var", axes = 2)
contrib<-contrib+theme(axis.text.x = element_text(size =3.5, angle = 90, hjust = 1))

contrib_plotly <- ggplotly(contrib)

contrib_plotly
```
#### Contribución 3er eje
```{r}
#| label: contribacm3-ventil
#| echo: false
#| output: true

contrib<-fviz_contrib(acm_ventil, choice = "var", axes = 3)
contrib<-contrib+theme(axis.text.x = element_text(size =3.5, angle = 90, hjust = 1))

contrib_plotly <- ggplotly(contrib)

contrib_plotly
```

:::

### Contribución de cada variable

::: panel-tabset
#### Ejes 1-2
```{r}
#| label: contribucion-correlacion-ventil
#| echo: false
#| warning: false
#| output: true

# Crear el gráfico ggplot
gg <- ggplot(data = acm_ventil$var$eta2, aes(x = !!sym("Dim 1"), y = !!sym("Dim 2"), label = rownames(acm_ventil$var$eta2), text = rownames(acm_ventil$var$eta2))) +
  geom_point(size=0.75,shape=75,colour="blue3") +  # Añadir los puntos
  geom_text_repel(aes(label = rownames(acm_ventil$var$eta2)), size = 3) +  # Añadir las etiquetas
  theme_minimal() +  # Aplicar un tema minimalista
  labs(title = "MCA Ventil - Correlación de variables", 
       x = "Dim 1", y = "Dim 2")  # Añadir títulos y

# Convertir el gráfico ggplot a plotly y mostrar el nombre de la variable al pasar el mouse
ggplotly(gg, tooltip = "text")

```

#### Ejes 2-3
```{r}
#| label: contribucion-correlacion2-ventil
#| echo: false
#| warning: false
#| output: true

# Crear el gráfico ggplot
gg <- ggplot(data = acm_ventil$var$eta2, aes(x = !!sym("Dim 2"), y = !!sym("Dim 3"), label = rownames(acm_ventil$var$eta2), text = rownames(acm_ventil$var$eta2))) +
  geom_point(size=0.75,shape=75,colour="blue3") +  # Añadir los puntos
  geom_text_repel(aes(label = rownames(acm_ventil$var$eta2)), size = 3) +  # Añadir las etiquetas
  theme_minimal() +  # Aplicar un tema minimalista
  labs(title = "MCA Ventil - Correlación de variables", 
       x = "Dim 2", y = "Dim 3")  # Añadir títulos y etiquetas

# Convertir el gráfico ggplot a plotly y mostrar el nombre de la variable al pasar el mouse
ggplotly(gg, tooltip = "text")

```

#### Ejes 1-3
```{r}
#| label: contribucion-correlacion3_ventil
#| echo: false
#| warning: false
#| output: true
gg <- ggplot(data = acm_ventil$var$eta2, aes(x = !!sym("Dim 1"), y = !!sym("Dim 3"), label = rownames(acm_ventil$var$eta2), text = rownames(acm_ventil$var$eta2))) +
  geom_point(size=0.75,shape=75,colour="blue3") +  # Añadir los puntos
  geom_text_repel(aes(label = rownames(acm_ventil$var$eta2)), size = 3) +  # Añadir las etiquetas
  theme_minimal() +  # Aplicar un tema minimalista
  labs(title = "MCA Ventil - Correlación de variables", 
       x = "Dim 1", y = "Dim 3")  # Añadir títulos y
# Convertir el gráfico ggplot a plotly y mostrar el nombre de la variable al pasar el mouse
ggplotly(gg, tooltip = "text")

```
:::
# ACM Por categorías

## ACM de Variables Sociodemográficas
```{r}
#| label: ACM Sociodemográficas
#| message: false
#| echo: false
#| output: false


Var_cuali_sociodemo<-c(
"CATEGORIAS_EDAD_CONSUMO_TABACO",
"CATEGORIAS_EDAD_CONSUMO_ALCOHOL",
"CATEGORIAS_EDAD_CONSUMO_MARIHUANA" ,
#"CATEGORIAS_EDAD_CONSUMO_INHALABLES",
#"CATEGORIAS_EDAD_CONSUMO_LSD",
#"CATEGORIAS_EDAD_CONSUMO_HONGOS",
#"CATEGORIAS_EDAD_CONSUMO_COCAINA",
#"CATEGORIAS_EDAD_CONSUMO_CRACK",
#"CATEGORIAS_EDAD_CONSUMO_HEROINA",
#"CATEGORIAS_EDAD_CONSUMO_CHOCHOS",
#"CATEGORIAS_EDAD_CONSUMO_TRANQUILIZANTES",
#"CATEGORIAS_EDAD_CONSUMO_ANFETAMINAS",
#"COLOR_PIEL",
"VIVIO_MADRE_ADOLESCENCIA", 
"VIVIO_PADRE_ADOLESCENCIA",
"SEXO",
#"NACION",
"EST_CIVIL", 
"HIJOS",
#"NIVEL_ESCOLARIDAD",
"PARO_ESTUDIOS",
#"IDENTI_GENERO", 
"ORIENT_SEXUAL",
"CONSIDERO_SUICIDIO" #,
#"DISC_VISUAL",
#"DISC_AUDITIVA",
#"DISC_MOTRIZ"
)

DatosCualiSoc<-Tabla1[,Var_cuali_sociodemo]
acmSoc <- MCA(DatosCualiSoc, graph=FALSE,level.ventil = 0.01)
```

```{r}
#| fig-cap: ''
#| fig-align: 'center'
#| fig-width: 5.5
#| fig-height: 5
#| echo: false
fviz_mca_var_interactive(acmSoc,col.var = "cos2", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"), 
             axes=c(1,2), repel = TRUE,  ggtheme=theme_minimal())

#fviz_mca_var(acmSoc,col.var = "cos2", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"), axes=c(4,5), repel = TRUE,label="none",  ggtheme=theme_minimal())


```



```{r}
#| echo: false
screeplot <- fviz_screeplot(acmSoc, addlabels = TRUE, ylim = c(0, 20)) +  ggtitle("Scree Plot") + theme_minimal()+ylab("Porcentaje de varianza explicada")+xlab("Ejes")
## Usando modif.rate() del paquete GDAtools:
# ptau <- modif.rate(acm)$modif[, 1]
## Haciendo las cuentas uno mismo:
s <- ncol(DatosCualiSoc)
l <- acmSoc$eig[acmSoc$eig[,1] > 1/s, 1]
tau <- ( s / (s - 1) )^2 * ( l - (1/s) )^2
ptau <- tau / sum( tau ) * 100

# Creamos un data frame para usar con ggplot2
barplot_df <- data.frame(Indice = factor(1:length(ptau)), Valor = ptau)

# Creamos el gráfico de barras con ggplot2
barplot_gg <- ggplot(barplot_df, aes(x = Indice, y = Valor)) +
  geom_bar(stat = "identity", fill = "darkred") +
  ylim(0, max(barplot_df$Valor+10)) +
  labs(x = "Ejes", y = expression(tau(lambda))) +
  theme_minimal() +
  ggtitle("Criterio de Benzécri")

grid.arrange(screeplot, barplot_gg, ncol = 1)
```




## ACM de Variables economicas
```{r}
#| label: ACM Economicas
#| message: false
#| echo: false
#| output: false


Var_cuali_eco<-c("VIVE_CON",
                 "TRABAJO",
                 "PODIA_COMER",
                 "DEUDA",
                 "SALARIO_MES_ANTERIOR")

DatosCualieco<-Tabla1[,Var_cuali_eco]
acmEco <- MCA(DatosCualieco, graph=FALSE,level.ventil = 0.01)
```


```{r}
#| fig-cap: ''
#| fig-align: 'center'
#| fig-width: 5.5
#| fig-height: 5
#| echo: false
fviz_mca_var_interactive(acmEco, axes=c(1,2), repel = TRUE,  ggtheme=theme_minimal(),col.var = "cos2", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"))


```


```{r}
#| echo: false
screeplot <- fviz_screeplot(acmEco, addlabels = TRUE, ylim = c(0, 20)) +  ggtitle("Scree Plot") + theme_minimal()+ylab("Porcentaje de varianza explicada")+xlab("Ejes")
## Usando modif.rate() del paquete GDAtools:
# ptau <- modif.rate(acm)$modif[, 1]
## Haciendo las cuentas uno mismo:
s <- ncol(DatosCualieco)
l <- acmEco$eig[acmEco$eig[,1] > 1/s, 1]
tau <- ( s / (s - 1) )^2 * ( l - (1/s) )^2
ptau <- tau / sum( tau ) * 100

# Creamos un data frame para usar con ggplot2
barplot_df <- data.frame(Indice = factor(1:length(ptau)), Valor = ptau)

# Creamos el gráfico de barras con ggplot2
barplot_gg <- ggplot(barplot_df, aes(x = Indice, y = Valor)) +
  geom_bar(stat = "identity", fill = "darkred") +
  ylim(0, max(barplot_df$Valor+10)) +
  labs(x = "Ejes", y = expression(tau(lambda))) +
  theme_minimal() +
  ggtitle("Criterio de Benzécri")

grid.arrange(screeplot, barplot_gg, ncol = 1)
```

## ACM de Variables delictivas
```{r}
#| label: ACM Delictivas
#| message: false
#| echo: false
#| output: false


Var_cuali_deli<-c(
  "SENTENCIADO_ANTES",
  "MOTIVO_DETENCION" ,
  "TIEMPO_DEL_DET",
 "INTENTO_SOBORNO",
 "DECLARACION_CULPABLE",
 "INTENTO_SOBORNO_JUICIO"
)

DatosCualiDeli<-Tabla1[,Var_cuali_deli]
acmDeli <- MCA(DatosCualiDeli, graph=FALSE,level.ventil = 0.01)
```



```{r}
#| fig-cap: ''
#| fig-align: 'center'
#| fig-width: 5.5
#| fig-height: 5
#| echo: false
fviz_mca_var_interactive(acmDeli, axes=c(1,2), repel = TRUE,  ggtheme=theme_minimal(),col.var = "cos2", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"))

```

```{r}
#| echo: false
screeplot <- fviz_screeplot(acmDeli, addlabels = TRUE, ylim = c(0, 20)) +  ggtitle("Scree Plot") + theme_minimal()+ylab("Porcentaje de varianza explicada")+xlab("Ejes")
## Usando modif.rate() del paquete GDAtools:
# ptau <- modif.rate(acm)$modif[, 1]
## Haciendo las cuentas uno mismo:
s <- ncol(DatosCualiDeli)
l <- acmDeli$eig[acmDeli$eig[,1] > 1/s, 1]
tau <- ( s / (s - 1) )^2 * ( l - (1/s) )^2
ptau <- tau / sum( tau ) * 100

# Creamos un data frame para usar con ggplot2
barplot_df <- data.frame(Indice = factor(1:length(ptau)), Valor = ptau)

# Creamos el gráfico de barras con ggplot2
barplot_gg <- ggplot(barplot_df, aes(x = Indice, y = Valor)) +
  geom_bar(stat = "identity", fill = "darkred") +
  ylim(0, max(barplot_df$Valor+10)) +
  labs(x = "Ejes", y = expression(tau(lambda))) +
  theme_minimal() +
  ggtitle("Criterio de Benzécri")

grid.arrange(screeplot, barplot_gg, ncol = 1)
```

## ACM de Vida Intracarcelaria
```{r}
#| label: ACM Intra carcelaria
#| message: false
#| echo: false
#| output: false


Var_cuali_intra<-c(
 "CAR_PERSONAS_CELDA",
 "CELDA_VENTANAS",
 "CELDA_AGUA_POTABLE" ,
 "CELDA_DRENAJE",
 "CELDA_LUZ",
 "CELDA_DUCHA" ,
 "CELDA_SANITARIO" ,
 "CELDA_SERVICIO_MEDICO",
 "CELDA_ALIMENTOS",
 "CARCEL_EJERCICIO",
 "CARCEL_LECTURA" ,
 "CARCEL_RELIGION" ,
 "CARCEL_LLAMADAS" ,
 "CARCEL_ESTUDIO" ,
 "CARCEL_VISITA" ,
 "CELDA_SEGURIDAD" ,
 "CARCEL_SEGURIDAD",
 "TIPO_CARCEL",
 "TIEMPO_CARCEL" 
)

DatosCualiIntra<-Tabla1[,Var_cuali_intra]
acmIntra <- MCA(DatosCualiIntra, graph=FALSE,level.ventil = 0.01)
```



```{r}
#| fig-cap: ''
#| fig-align: 'center'
#| fig-width: 5.5
#| fig-height: 5
#| echo: false
fviz_mca_var_interactive(acmIntra, axes=c(3,4), repel = TRUE,  ggtheme=theme_minimal(),col.var = "cos2", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"))

```

```{r}
#| echo: false
screeplot <- fviz_screeplot(acmIntra, addlabels = TRUE, ylim = c(0, 20)) +  ggtitle("Scree Plot") + theme_minimal()+ylab("Porcentaje de varianza explicada")+xlab("Ejes")
## Usando modif.rate() del paquete GDAtools:
# ptau <- modif.rate(acm)$modif[, 1]
## Haciendo las cuentas uno mismo:
s <- ncol(DatosCualiIntra)
l <- acmIntra$eig[acmIntra$eig[,1] > 1/s, 1]
tau <- ( s / (s - 1) )^2 * ( l - (1/s) )^2
ptau <- tau / sum( tau ) * 100

# Creamos un data frame para usar con ggplot2
barplot_df <- data.frame(Indice = factor(1:length(ptau)), Valor = ptau)

# Creamos el gráfico de barras con ggplot2
barplot_gg <- ggplot(barplot_df, aes(x = Indice, y = Valor)) +
  geom_bar(stat = "identity", fill = "darkred") +
  ylim(0, max(barplot_df$Valor+10)) +
  labs(x = "Ejes", y = expression(tau(lambda))) +
  theme_minimal() +
  ggtitle("Criterio de Benzécri")

grid.arrange(screeplot, barplot_gg, ncol = 1)
```

## ACM de Expectativas de Salida
```{r}
#| label: ACM Expectativas
#| message: false
#| echo: false
#| output: false


Var_cuali_sali<-c(
"SALIDA_VIVIENDA",
 "SALIDA_EMPLEO",
 "SALIDA_ESTUDIO",
 "SALIDA_AMIGOS",
 "SALIDA_FAMILIA",
 "SALIDA_REINCORPORACION",
 "CONSIDERO_SUICIDIO" 
)

DatosCualisali<-Tabla1[,Var_cuali_sali]
acmSali <- MCA(DatosCualisali, graph=FALSE,level.ventil = 0.02)
```



```{r}
#| fig-cap: ''
#| fig-align: 'center'
#| fig-width: 5.5
#| fig-height: 5
#| echo: false
#fviz_mca_var_interactive(acmSali, axes=c(2,4), repel = TRUE,  ggtheme=theme_minimal())

fviz_mca_var_interactive(acmSali, axes=c(1,2), repel = TRUE,  ggtheme=theme_minimal(),col.var = "cos2", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"))


```



```{r}
#| echo: false


screeplot <- fviz_screeplot(acmSali, addlabels = TRUE, ylim = c(0, 30)) +  ggtitle("Scree Plot") + theme_minimal()+ylab("Porcentaje de varianza explicada")+xlab("Ejes")

## Usando modif.rate() del paquete GDAtools:
# ptau <- modif.rate(acm)$modif[, 1]
## Haciendo las cuentas uno mismo:
s <- ncol(DatosCualisali)
l <- acmSali$eig[acmSali$eig[,1] > 1/s, 1]
tau <- ( s / (s - 1) )^2 * ( l - (1/s) )^2
ptau <- tau / sum( tau ) * 100

# Creamos un data frame para usar con ggplot2
barplot_df <- data.frame(Indice = factor(1:length(ptau)), Valor = ptau)

# Creamos el gráfico de barras con ggplot2
barplot_gg <- ggplot(barplot_df, aes(x = Indice, y = Valor)) +
  geom_bar(stat = "identity", fill = "darkred") +
  ylim(0, max(barplot_df$Valor+10)) +
  labs(x = "Ejes", y = expression(tau(lambda))) +
  theme_minimal() +
  ggtitle("Criterio de Benzécri")

grid.arrange(screeplot, barplot_gg, ncol = 1)
```