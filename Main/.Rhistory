as.data.frame(varCualitativas,col.names="vairables")
as.data.frame(varCualitativas,colnames="vairables")
as.data.frame(varCualitativas,col="a")
#| label: Lista-variables
#| echo: false
#| warning: false
#| output: false
kable(as.data.frame(varCualitativas))
#| label: Tabla-disyuntiva-completa1
#| echo: false
#| warning: false
#| output: false
DatosCualitativos <- data.frame(lapply(DatosCualitativos, as.factor))
Z <- acm.disjonctif(DatosCualitativos) # función de ade4
#| label: Tabla-disyuntiva-completa-visualizacion
#| echo: false
#| warning: false
#| output: true
Z |> head(n=5) |>
datatable(
options = list(dom = 'ftp', paging = TRUE)
)
#| label: funcion-interactive
#| echo: false
#| warning: false
#| output: false
#Z <- as.matrix(Z)
#(B <- t(Z) %*% Z)
fviz_mca_var_interactive <- function(acm, axes = c(1, 2), repel = TRUE, ggtheme = theme_minimal(),
col.var = "blue", gradient.cols = NULL) {
# Calcula la varianza explicada para los ejes seleccionados
eigenvalues <- acm$eig
var_explained_x <- round(eigenvalues[axes[1], 2], 2)
var_explained_y <- round(eigenvalues[axes[2], 2], 2)
# Extrae las coordenadas y nombres de las variables (categorías)
var_data <- acm$var$coord
var_data_df <- data.frame(var_data)
var_data_df$Variable <- rownames(var_data_df)
# Añade la columna correspondiente al color si se usa col.var como en la función original
if (col.var == "cos2") {
var_data_df$Color <- get_mca_var(acm)$cos2[, axes[1]]
p <- ggplot(var_data_df, aes(x = !!sym(colnames(var_data_df)[axes[1]]),
y = !!sym(colnames(var_data_df)[axes[2]]),
text = Variable, color = Color)) +
geom_point(size = 0.75, shape = 25, fill = "red") +  # Aquí removemos 'color = "red"'
theme_minimal() +
scale_color_gradientn(colors = gradient.cols) +  # Aplica el gradiente de colores
labs(x = paste0("Dim ", axes[1], " (", var_explained_x, "%)"),
y = paste0("Dim ", axes[2], " (", var_explained_y, "%)"))
} else {
# Usa un color fijo si no se especifica un gradiente
p <- ggplot(var_data_df, aes(x = !!sym(colnames(var_data_df)[axes[1]]),
y = !!sym(colnames(var_data_df)[axes[2]]),
text = Variable)) +
geom_point(size = 0.75, shape = 25, color = "red", fill = "red") +
theme_minimal() +
labs(x = paste0("Dim ", axes[1], " (", var_explained_x, "%)"),
y = paste0("Dim ", axes[2], " (", var_explained_y, "%)"))
}
# Agrega las líneas punteadas centradas en el plano cartesiano
p <- p +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray") +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray")
# Conviértelo en un gráfico interactivo con plotly
plotly_obj <- ggplotly(p, tooltip = "text")
# Retorna el gráfico interactivo
return(plotly_obj)
}
#| label: contribacm4
#| echo: false
#| output: true
contrib<-fviz_contrib(acm, choice = "var", axes = 4)
#| label: Seleccion-variables
#| echo: false
#| warning: false
#| output: false
#http://www.sthda.com/english/articles/31-principal-component-methods-in-r-practical-guide/112-pca-principal-component-analysis-essentials/#r-packages
#Escogemos las variables cuantitativas
varCualitativas<-c("TIPO_CARCEL","EST_CIVIL","NIVEL_ESCOLARIDAD","PARO_ESTUDIOS","ORIENT_SEXUAL","DISC_MOTRIZ","COLOR_PIEL","CARCEL_LECTURA","CARCEL_EJERCICIO","CELDA_ALIMENTOS","CELDA_SERVICIO_MEDICO","CELDA_DUCHA","DECLARACION_CULPABLE","CATEGORIAS_TIEMPO_RECLUIDO","CATEGORIAS_TIEMPO_PROCESO","CAR_PERSONAS_CELDA")
#DatosCuantitativos<-Tabla1[,varCuantitativas]
DatosCualitativos<-Tabla1[,varCualitativas]
#correlaciones<-cor(DatosCuantitativos)
#| label: MCA1
#| echo: true
#| output: false
#MCA que incluye todas las categorias
acm <- MCA(DatosCualitativos, graph=FALSE)
#MCA con ventilación de aquellas categorias menores al 1%
acm_ventil<-MCA(DatosCualitativos,graph = FALSE,level.ventil = 0.01)
#| label: screeplot1
#| echo: false
#| output: true
screeplot <- fviz_screeplot(acm, addlabels = TRUE, ylim = c(0, 20)) +  ggtitle("Scree Plot") + theme_minimal()+ylab("Porcentaje de varianza explicada")+xlab("Ejes")
## Usando modif.rate() del paquete GDAtools:
# ptau <- modif.rate(acm)$modif[, 1]
## Haciendo las cuentas uno mismo:
s <- ncol(DatosCualitativos)
l <- acm$eig[acm$eig[,1] > 1/s, 1]
tau <- ( s / (s - 1) )^2 * ( l - (1/s) )^2
ptau <- tau / sum( tau ) * 100
# Creamos un data frame para usar con ggplot2
barplot_df <- data.frame(Indice = factor(1:length(ptau)), Valor = ptau)
# Creamos el gráfico de barras con ggplot2
barplot_gg <- ggplot(barplot_df, aes(x = Indice, y = Valor)) +
geom_bar(stat = "identity", fill = "darkred") +
ylim(0, max(barplot_df$Valor+10)) +
labs(x = "Ejes", y = expression(tau(lambda))) +
theme_minimal() +
ggtitle("Criterio de Benzécri")
grid.arrange(screeplot, barplot_gg, ncol = 1)
#| label: contribacm1
#| echo: false
#| output: true
contrib <- fviz_contrib(acm, choice = "var", axes = 1) +
theme(axis.text.x = element_text(size = 6, angle = 90, hjust = 1))
contrib<-contrib+theme(axis.text.x = element_text(size =4, angle = 90, hjust = 1))
# Convierte el gráfico de ggplot a plotly
contrib_plotly <- ggplotly(contrib)
contrib_plotly
#| label: contribacm2
#| echo: false
#| output: true
contrib<-fviz_contrib(acm, choice = "var", axes = 2)
contrib<-contrib+theme(axis.text.x = element_text(size =3.5, angle = 90, hjust = 1))
contrib_plotly <- ggplotly(contrib)
contrib_plotly
#| label: contribacm3
#| echo: false
#| output: true
contrib<-fviz_contrib(acm, choice = "var", axes = 3)
contrib<-contrib+theme(axis.text.x = element_text(size =3.5, angle = 90, hjust = 1))
contrib_plotly <- ggplotly(contrib)
contrib_plotly
#| label: contribacm4
#| echo: false
#| output: true
contrib<-fviz_contrib(acm, choice = "var", axes = 4)
contrib<-contrib+theme(axis.text.x = element_text(size =3.5, angle = 90, hjust = 1))
contrib_plotly <- ggplotly(contrib)
contrib_plotly
View(Tabla1)
#| fig-cap: ''
#| fig-align: 'center'
#| fig-width: 5.5
#| fig-height: 5
#| echo: false
fviz_mca_ind(acm, axes=c(1,2), geom="point", asp=1, col.ind = "cos2",ggtheme=theme_minimal())
#| fig-cap: ''
#| fig-align: 'center'
#| fig-width: 5.5
#| fig-height: 5
#| echo: false
fviz_mca_ind(acm, axes=c(2,4), geom="point", asp=1, col.ind = "cos2",ggtheme=theme_minimal())
#| fig-cap: ''
#| fig-align: 'center'
#| fig-width: 5.5
#| fig-height: 5
#| echo: false
fviz_mca_ind(acm, axes=c(3,4), geom="point", asp=1, col.ind = "cos2",ggtheme=theme_minimal())
#| label: contribacm4
#| echo: false
#| output: true
contrib<-fviz_contrib(acm, choice = "var", axes = 5)
contrib<-contrib+theme(axis.text.x = element_text(size =3.5, angle = 90, hjust = 1))
contrib_plotly <- ggplotly(contrib)
contrib_plotly
#| fig-cap: ''
#| fig-align: 'center'
#| fig-width: 5.5
#| fig-height: 5
#| echo: false
fviz_mca_ind(acm, axes=c(4,5), geom="point", asp=1, col.ind = "cos2",ggtheme=theme_minimal())
#| fig-cap: ''
#| fig-align: 'center'
#| fig-width: 5.5
#| fig-height: 5
#| echo: false
fviz_mca_ind(acm, axes=c(3,5), geom="point", asp=1, col.ind = "cos2",ggtheme=theme_minimal())
#| fig-cap: ''
#| fig-align: 'center'
#| fig-width: 5.5
#| fig-height: 5
#| echo: false
fviz_mca_ind(acm, axes=c(2,5), geom="point", asp=1, col.ind = "cos2",ggtheme=theme_minimal())
#| fig-cap: ''
#| fig-align: 'center'
#| fig-width: 5.5
#| fig-height: 5
#| echo: false
fviz_mca_ind(acm, axes=c(1,2), geom="point", asp=1, col.ind = "cos2",ggtheme=theme_minimal())
#| label: contribacm4
#| echo: false
#| output: true
contrib<-fviz_contrib(acm, choice = "var", axes = 4)
contrib<-contrib+theme(axis.text.x = element_text(size =3.5, angle = 90, hjust = 1))
contrib_plotly <- ggplotly(contrib)
contrib_plotly
#| label: ACM Expectativas
#| message: false
#| echo: false
#| output: false
Var_cuali_sali<-c(
"SALIDA_VIVIENDA",
"SALIDA_EMPLEO",
"SALIDA_ESTUDIO",
"SALIDA_AMIGOS",
"SALIDA_FAMILIA",
"SALIDA_REINCORPORACION",
"CONSIDERO_SUICIDIO"
)
DatosCualisali<-Tabla1[,Var_cuali_sali]
acmSali <- MCA(DatosCualisali, graph=FALSE,level.ventil = 0.02)
#| fig-cap: ''
#| fig-align: 'center'
#| fig-width: 5.5
#| fig-height: 5
#| echo: false
#fviz_mca_var_interactive(acmSali, axes=c(2,4), repel = TRUE,  ggtheme=theme_minimal())
fviz_mca_var_interactive(acmSali, axes=c(1,2), repel = TRUE,  ggtheme=theme_minimal(),col.var = "cos2", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"))
#| echo: false
screeplot <- fviz_screeplot(acmSali, addlabels = TRUE, ylim = c(0, 30)) +  ggtitle("Scree Plot") + theme_minimal()+ylab("Porcentaje de varianza explicada")+xlab("Ejes")
## Usando modif.rate() del paquete GDAtools:
# ptau <- modif.rate(acm)$modif[, 1]
## Haciendo las cuentas uno mismo:
s <- ncol(DatosCualisali)
l <- acmSali$eig[acmSali$eig[,1] > 1/s, 1]
tau <- ( s / (s - 1) )^2 * ( l - (1/s) )^2
ptau <- tau / sum( tau ) * 100
# Creamos un data frame para usar con ggplot2
barplot_df <- data.frame(Indice = factor(1:length(ptau)), Valor = ptau)
# Creamos el gráfico de barras con ggplot2
barplot_gg <- ggplot(barplot_df, aes(x = Indice, y = Valor)) +
geom_bar(stat = "identity", fill = "darkred") +
ylim(0, max(barplot_df$Valor+10)) +
labs(x = "Ejes", y = expression(tau(lambda))) +
theme_minimal() +
ggtitle("Criterio de Benzécri")
grid.arrange(screeplot, barplot_gg, ncol = 1)
#| label: contribacm1Sali
#| echo: false
#| output: true
contrib <- fviz_contrib(acmSali, choice = "var", axes = 1) +
theme(axis.text.x = element_text(size = 6, angle = 90, hjust = 1))
contrib<-contrib+theme(axis.text.x = element_text(size =4, angle = 90, hjust = 1))
# Convierte el gráfico de ggplot a plotly
contrib_plotly <- ggplotly(contrib)
contrib_plotly
#| label: contribacm2 Sali
#| echo: false
#| output: true
contrib <- fviz_contrib(acmSali, choice = "var", axes = 2) +
theme(axis.text.x = element_text(size = 6, angle = 90, hjust = 1))
contrib<-contrib+theme(axis.text.x = element_text(size =4, angle = 90, hjust = 1))
# Convierte el gráfico de ggplot a plotly
contrib_plotly <- ggplotly(contrib)
contrib_plotly
#| label: ACM Intra carcelaria
#| message: false
#| echo: false
#| output: false
Var_cuali_intra<-c(
"CAR_PERSONAS_CELDA",
"CELDA_VENTANAS",
"CELDA_AGUA_POTABLE" ,
"CELDA_DRENAJE",
"CELDA_LUZ",
"CELDA_DUCHA" ,
"CELDA_SANITARIO" ,
"CELDA_SERVICIO_MEDICO",
"CELDA_ALIMENTOS",
"CARCEL_EJERCICIO",
"CARCEL_LECTURA" ,
"CARCEL_RELIGION" ,
"CARCEL_LLAMADAS" ,
"CARCEL_ESTUDIO" ,
"CARCEL_VISITA" ,
"CELDA_SEGURIDAD" ,
"CARCEL_SEGURIDAD",
"TIPO_CARCEL",
"TIEMPO_CARCEL"
)
DatosCualiIntra<-Tabla1[,Var_cuali_intra]
acmIntra <- MCA(DatosCualiIntra, graph=FALSE,level.ventil = 0.01)
#| echo: false
screeplot <- fviz_screeplot(acmIntra, addlabels = TRUE, ylim = c(0, 20)) +  ggtitle("Scree Plot") + theme_minimal()+ylab("Porcentaje de varianza explicada")+xlab("Ejes")
## Usando modif.rate() del paquete GDAtools:
# ptau <- modif.rate(acm)$modif[, 1]
## Haciendo las cuentas uno mismo:
s <- ncol(DatosCualiIntra)
l <- acmIntra$eig[acmIntra$eig[,1] > 1/s, 1]
tau <- ( s / (s - 1) )^2 * ( l - (1/s) )^2
ptau <- tau / sum( tau ) * 100
# Creamos un data frame para usar con ggplot2
barplot_df <- data.frame(Indice = factor(1:length(ptau)), Valor = ptau)
# Creamos el gráfico de barras con ggplot2
barplot_gg <- ggplot(barplot_df, aes(x = Indice, y = Valor)) +
geom_bar(stat = "identity", fill = "darkred") +
ylim(0, max(barplot_df$Valor+10)) +
labs(x = "Ejes", y = expression(tau(lambda))) +
theme_minimal() +
ggtitle("Criterio de Benzécri")
grid.arrange(screeplot, barplot_gg, ncol = 1)
#| label: contribacm1 Intra
#| echo: false
#| output: true
contrib <- fviz_contrib(acmIntra, choice = "var", axes = 1) +
theme(axis.text.x = element_text(size = 6, angle = 90, hjust = 1))
contrib<-contrib+theme(axis.text.x = element_text(size =4, angle = 90, hjust = 1))
# Convierte el gráfico de ggplot a plotly
contrib_plotly <- ggplotly(contrib)
contrib_plotly
#| label: contribacm2 Intra
#| echo: false
#| output: true
contrib <- fviz_contrib(acmIntra, choice = "var", axes = 2) +
theme(axis.text.x = element_text(size = 6, angle = 90, hjust = 1))
contrib<-contrib+theme(axis.text.x = element_text(size =4, angle = 90, hjust = 1))
# Convierte el gráfico de ggplot a plotly
contrib_plotly <- ggplotly(contrib)
contrib_plotly
#| label: ACM Delictivas
#| message: false
#| echo: false
#| output: false
Var_cuali_deli<-c(
"SENTENCIADO_ANTES",
"MOTIVO_DETENCION" ,
"TIEMPO_DEL_DET",
"INTENTO_SOBORNO",
"DECLARACION_CULPABLE",
"INTENTO_SOBORNO_JUICIO"
)
DatosCualiDeli<-Tabla1[,Var_cuali_deli]
acmDeli <- MCA(DatosCualiDeli, graph=FALSE,level.ventil = 0.01)
#| echo: false
screeplot <- fviz_screeplot(acmDeli, addlabels = TRUE, ylim = c(0, 20)) +  ggtitle("Scree Plot") + theme_minimal()+ylab("Porcentaje de varianza explicada")+xlab("Ejes")
## Usando modif.rate() del paquete GDAtools:
# ptau <- modif.rate(acm)$modif[, 1]
## Haciendo las cuentas uno mismo:
s <- ncol(DatosCualiDeli)
l <- acmDeli$eig[acmDeli$eig[,1] > 1/s, 1]
tau <- ( s / (s - 1) )^2 * ( l - (1/s) )^2
ptau <- tau / sum( tau ) * 100
# Creamos un data frame para usar con ggplot2
barplot_df <- data.frame(Indice = factor(1:length(ptau)), Valor = ptau)
# Creamos el gráfico de barras con ggplot2
barplot_gg <- ggplot(barplot_df, aes(x = Indice, y = Valor)) +
geom_bar(stat = "identity", fill = "darkred") +
ylim(0, max(barplot_df$Valor+10)) +
labs(x = "Ejes", y = expression(tau(lambda))) +
theme_minimal() +
ggtitle("Criterio de Benzécri")
grid.arrange(screeplot, barplot_gg, ncol = 1)
#| label: contribacm1SDeli
#| echo: false
#| output: true
contrib <- fviz_contrib(acmDeli, choice = "var", axes = 1) +
theme(axis.text.x = element_text(size = 6, angle = 90, hjust = 1))
contrib<-contrib+theme(axis.text.x = element_text(size =4, angle = 90, hjust = 1))
# Convierte el gráfico de ggplot a plotly
contrib_plotly <- ggplotly(contrib)
contrib_plotly
#| label: contribacm2 deli
#| echo: false
#| output: true
contrib <- fviz_contrib(acmDeli, choice = "var", axes = 2) +
theme(axis.text.x = element_text(size = 6, angle = 90, hjust = 1))
contrib<-contrib+theme(axis.text.x = element_text(size =4, angle = 90, hjust = 1))
# Convierte el gráfico de ggplot a plotly
contrib_plotly <- ggplotly(contrib)
contrib_plotly
#| fig-cap: ''
#| fig-align: 'center'
#| fig-width: 5.5
#| fig-height: 5
#| echo: false
fviz_mca_var_interactive(acmDeli, axes=c(1,2), repel = TRUE,  ggtheme=theme_minimal(),col.var = "cos2", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"))
#| label: ACM Economicas
#| message: false
#| echo: false
#| output: false
Var_cuali_eco<-c("VIVE_CON",
"TRABAJO",
"PODIA_COMER",
"DEUDA",
"SALARIO_MES_ANTERIOR")
DatosCualieco<-Tabla1[,Var_cuali_eco]
acmEco <- MCA(DatosCualieco, graph=FALSE,level.ventil = 0.01)
#| label: contribacm2 Eco
#| echo: false
#| output: true
contrib <- fviz_contrib(acmEco, choice = "var", axes = 2) +
theme(axis.text.x = element_text(size = 6, angle = 90, hjust = 1))
contrib<-contrib+theme(axis.text.x = element_text(size =4, angle = 90, hjust = 1))
# Convierte el gráfico de ggplot a plotly
contrib_plotly <- ggplotly(contrib)
contrib_plotly
#| label: contribacm1Eco
#| echo: false
#| output: true
contrib <- fviz_contrib(acmEco, choice = "var", axes = 1) +
theme(axis.text.x = element_text(size = 6, angle = 90, hjust = 1))
contrib<-contrib+theme(axis.text.x = element_text(size =4, angle = 90, hjust = 1))
# Convierte el gráfico de ggplot a plotly
contrib_plotly <- ggplotly(contrib)
contrib_plotly
#| echo: false
screeplot <- fviz_screeplot(acmEco, addlabels = TRUE, ylim = c(0, 20)) +  ggtitle("Scree Plot") + theme_minimal()+ylab("Porcentaje de varianza explicada")+xlab("Ejes")
## Usando modif.rate() del paquete GDAtools:
# ptau <- modif.rate(acm)$modif[, 1]
## Haciendo las cuentas uno mismo:
s <- ncol(DatosCualieco)
l <- acmEco$eig[acmEco$eig[,1] > 1/s, 1]
tau <- ( s / (s - 1) )^2 * ( l - (1/s) )^2
ptau <- tau / sum( tau ) * 100
# Creamos un data frame para usar con ggplot2
barplot_df <- data.frame(Indice = factor(1:length(ptau)), Valor = ptau)
# Creamos el gráfico de barras con ggplot2
barplot_gg <- ggplot(barplot_df, aes(x = Indice, y = Valor)) +
geom_bar(stat = "identity", fill = "darkred") +
ylim(0, max(barplot_df$Valor+10)) +
labs(x = "Ejes", y = expression(tau(lambda))) +
theme_minimal() +
ggtitle("Criterio de Benzécri")
grid.arrange(screeplot, barplot_gg, ncol = 1)
#| label: ACM Sociodemográficas
#| message: false
#| echo: false
#| output: false
Var_cuali_sociodemo<-c(
"CATEGORIAS_EDAD_CONSUMO_TABACO",
"CATEGORIAS_EDAD_CONSUMO_ALCOHOL",
"CATEGORIAS_EDAD_CONSUMO_MARIHUANA" ,
#"CATEGORIAS_EDAD_CONSUMO_INHALABLES",
#"CATEGORIAS_EDAD_CONSUMO_LSD",
#"CATEGORIAS_EDAD_CONSUMO_HONGOS",
#"CATEGORIAS_EDAD_CONSUMO_COCAINA",
#"CATEGORIAS_EDAD_CONSUMO_CRACK",
#"CATEGORIAS_EDAD_CONSUMO_HEROINA",
#"CATEGORIAS_EDAD_CONSUMO_CHOCHOS",
#"CATEGORIAS_EDAD_CONSUMO_TRANQUILIZANTES",
#"CATEGORIAS_EDAD_CONSUMO_ANFETAMINAS",
#"COLOR_PIEL",
"VIVIO_MADRE_ADOLESCENCIA",
"VIVIO_PADRE_ADOLESCENCIA",
"SEXO",
#"NACION",
"EST_CIVIL",
"HIJOS",
#"NIVEL_ESCOLARIDAD",
"PARO_ESTUDIOS",
#"IDENTI_GENERO",
"ORIENT_SEXUAL",
"CONSIDERO_SUICIDIO" #,
#"DISC_VISUAL",
#"DISC_AUDITIVA",
#"DISC_MOTRIZ"
)
DatosCualiSoc<-Tabla1[,Var_cuali_sociodemo]
acmSoc <- MCA(DatosCualiSoc, graph=FALSE,level.ventil = 0.01)
#| echo: false
screeplot <- fviz_screeplot(acmSoc, addlabels = TRUE, ylim = c(0, 20)) +  ggtitle("Scree Plot") + theme_minimal()+ylab("Porcentaje de varianza explicada")+xlab("Ejes")
## Usando modif.rate() del paquete GDAtools:
# ptau <- modif.rate(acm)$modif[, 1]
## Haciendo las cuentas uno mismo:
s <- ncol(DatosCualiSoc)
l <- acmSoc$eig[acmSoc$eig[,1] > 1/s, 1]
tau <- ( s / (s - 1) )^2 * ( l - (1/s) )^2
ptau <- tau / sum( tau ) * 100
# Creamos un data frame para usar con ggplot2
barplot_df <- data.frame(Indice = factor(1:length(ptau)), Valor = ptau)
# Creamos el gráfico de barras con ggplot2
barplot_gg <- ggplot(barplot_df, aes(x = Indice, y = Valor)) +
geom_bar(stat = "identity", fill = "darkred") +
ylim(0, max(barplot_df$Valor+10)) +
labs(x = "Ejes", y = expression(tau(lambda))) +
theme_minimal() +
ggtitle("Criterio de Benzécri")
grid.arrange(screeplot, barplot_gg, ncol = 1)
fviz_mca_ind(acmIntra, axes=c(2,3), geom="point", asp=1, col.ind = "cos2",ggtheme=theme_minimal())
fviz_mca_ind(acmIntra, axes=c(1,2), geom="point", asp=1, col.ind = "cos2",ggtheme=theme_minimal())
fviz_mca_ind(acmSoc, axes=c(1,2), geom="point", asp=1, col.ind = "cos2",ggtheme=theme_minimal())
fviz_mca_ind(acmSoc, axes=c(3,2), geom="point", asp=1, col.ind = "cos2",ggtheme=theme_minimal())
library(FactoMineR)
library(factoextra)
library(ggplot2)
library(plotly)
# Asume que ya tienes el resultado de tu ACM almacenado en un objeto llamado `acm`.
# Generar el biplot con las variables y extraer los datos.
biplot_data <- fviz_mca_biplot(acm, axes = c(1, 2), repel = TRUE, label = "var", ggtheme = theme_minimal())
data_var <- biplot_data$data
# Convertir los datos en un gráfico con ggplot2
gg <- ggplot(data = data_var, aes(x = x, y = y, label = name, text = name)) +
geom_point(color = "blue", size = 3) +  # Puntos para las variables
geom_text_repel(aes(label = name), size = 3) +  # Nombres de las variables
theme_minimal() +
labs(title = "MCA Biplot (Variables)", x = "Dim 1", y = "Dim 2")
# Convertir a plotly para hacer el gráfico interactivo
plotly_gg <- ggplotly(gg, tooltip = "text")
# Mostrar el gráfico interactivo
plotly_gg
biplot_data$data
a<-biplot_data$data
View(a)
biplot_data$labels
biplot_data$layers
#| fig-cap: ''
#| fig-align: 'center'
#| fig-width: 5.5
#| fig-height: 5
#| echo: false
fviz_mca_var_interactive(acm, axes=c(2,3), repel = TRUE, col.var = "cos2", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),ggtheme=theme_minimal())
