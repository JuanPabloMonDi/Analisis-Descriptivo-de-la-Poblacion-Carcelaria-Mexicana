tau <- ( s / (s - 1) )^2 * ( l - (1/s) )^2
ptau <- tau / sum( tau ) * 100
barplot(ptau, col="darkred", ylim = c(0,75))
## Usando modif.rate() del paquete GDAtools:
# ptau <- modif.rate(acm)$modif[, 1]
## Haciendo las cuentas uno mismo:
s <- ncol(DatosCualieco)
l <- acmEco$eig[acmEco$eig[,1] > 1/s, 1]
tau <- ( s / (s - 1) )^2 * ( l - (1/s) )^2
ptau <- tau / sum( tau ) * 100
barplot(ptau, col="darkred", ylim = c(0,75))
## Usando modif.rate() del paquete GDAtools:
# ptau <- modif.rate(acm)$modif[, 1]
## Haciendo las cuentas uno mismo:
s <- ncol(DatosCualisali)
l <- acmSali$eig[acmSali$eig[,1] > 1/s, 1]
tau <- ( s / (s - 1) )^2 * ( l - (1/s) )^2
ptau <- tau / sum( tau ) * 100
barplot(ptau, col="darkred", ylim = c(0,75))
#| fig-cap: ''
#| fig-align: 'center'
#| fig-width: 5.5
#| fig-height: 5
#| echo: false
#fviz_mca_var_interactive(acmSali, axes=c(2,4), repel = TRUE,  ggtheme=theme_minimal())
fviz_mca_var_interactive(acmSali, axes=c(5,4), repel = TRUE,  ggtheme=theme_minimal())
#| label: Tabla-disyuntiva-completa
#| echo: false
#| warning: false
#| output: false
DatosCualitativos <- data.frame(lapply(DatosCualitativos, as.factor))
Z <- acm.disjonctif(DatosCualitativos) # función de ade4
screeplot <- fviz_screeplot(acm, addlabels = TRUE, ylim = c(0, 20)) +
ggtitle(title1) + theme_minimal()
title1<-"Tiulo1";title2<-"Titulo2"
screeplot <- fviz_screeplot(acm, addlabels = TRUE, ylim = c(0, 20)) +
ggtitle(title1) + theme_minimal()
# Gráfico 2: Barplot de ptau
s <- ncol(acm$call$X)
l <- acm$eig[acm$eig[,1] > 1/s, 1]
tau <- ( s / (s - 1) )^2 * ( l - (1/s) )^2
ptau <- tau / sum( tau ) * 100
barplot <- barplot(ptau, col="darkred", ylim = c(0,75), main = title2)
# Usamos grid.arrange para mostrar ambos gráficos uno encima del otro
grid.arrange(screeplot, as.ggplot(barplot), ncol = 1)
screeplot <- fviz_screeplot(acm, addlabels = TRUE, ylim = c(0, 20)) +
ggtitle(title1) + theme_minimal()
# Gráfico 2: Barplot de ptau
s <- ncol(acm$call$X)
l <- acm$eig[acm$eig[,1] > 1/s, 1]
tau <- ( s / (s - 1) )^2 * ( l - (1/s) )^2
ptau <- tau / sum( tau ) * 100
barplot <- barplot(ptau, col="darkred", ylim = c(0,75), main = title2)
# Usamos grid.arrange para mostrar ambos gráficos uno encima del otro
grid.arrange(screeplot, as.ggplot(barplot), ncol = 1)
library(gridExtra)
screeplot <- fviz_screeplot(acm, addlabels = TRUE, ylim = c(0, 20)) +
ggtitle(title1) + theme_minimal()
# Gráfico 2: Barplot de ptau
s <- ncol(acm$call$X)
l <- acm$eig[acm$eig[,1] > 1/s, 1]
tau <- ( s / (s - 1) )^2 * ( l - (1/s) )^2
ptau <- tau / sum( tau ) * 100
barplot <- barplot(ptau, col="darkred", ylim = c(0,75), main = title2)
# Usamos grid.arrange para mostrar ambos gráficos uno encima del otro
grid.arrange(screeplot, as.ggplot(barplot), ncol = 1)
screeplot <- fviz_screeplot(acm, addlabels = TRUE, ylim = c(0, 20)) +
ggtitle(title1) + theme_minimal()
# Gráfico 2: Barplot de ptau
s <- ncol(acm$call$X)
l <- acm$eig[acm$eig[,1] > 1/s, 1]
tau <- ( s / (s - 1) )^2 * ( l - (1/s) )^2
ptau <- tau / sum( tau ) * 100
barplot <- barplot(ptau, col="darkred", ylim = c(0,75), main = title2)
# Usamos grid.arrange para mostrar ambos gráficos uno encima del otro
grid.arrange(screeplot, (barplot), ncol = 1)
screeplot <- fviz_screeplot(acm, addlabels = TRUE, ylim = c(0, 20)) +
ggtitle(title1) + theme_minimal()
# Gráfico 2: Barplot de ptau
s <- ncol(acm$call$X)
l <- acm$eig[acm$eig[,1] > 1/s, 1]
tau <- ( s / (s - 1) )^2 * ( l - (1/s) )^2
ptau <- tau / sum( tau ) * 100
# Crear el barplot y capturarlo como un objeto de tipo 'grob'
barplot_grob <- recordPlot({
barplot(ptau, col = "darkred", ylim = c(0, 75), main = title2)
})
# Usamos grid.arrange para mostrar ambos gráficos uno encima del otro
grid.arrange(screeplot, grid.grabExpr(grid.draw(barplot_grob)), ncol = 1)
screeplot
barplot
plot(barplot)
barplot_grob
plot(barplot_grob)
# Configura la ventana gráfica para tener 2 filas y 1 columna
par(mfrow = c(2, 1))
# Gráfico 1: Scree plot
fviz_screeplot(acm, addlabels = TRUE, ylim = c(0, 20), main = "Gráfico 1: Scree Plot")
# Gráfico 2: Barplot de ptau
s <- ncol(acm$call$X)
l <- acm$eig[acm$eig[,1] > 1/s, 1]
tau <- ( s / (s - 1) )^2 * ( l - (1/s) )^2
ptau <- tau / sum( tau ) * 100
barplot(ptau, col = "darkred", ylim = c(0, 75), main = "Gráfico 2: Modif. Rate")
# Gráfico 1: Scree plot
fviz_screeplot(acm, addlabels = TRUE, ylim = c(0, 20), main = "Gráfico 1: Scree Plot")
# Configura la ventana gráfica para tener 2 filas y 1 columna
par(mfrow = c(2, 1))
# Gráfico 1: Scree plot
fviz_screeplot(acm, addlabels = TRUE, ylim = c(0, 20), main = "Gráfico 1: Scree Plot")
# Gráfico 2: Barplot de ptau
s <- ncol(acm$call$X)
l <- acm$eig[acm$eig[,1] > 1/s, 1]
tau <- ( s / (s - 1) )^2 * ( l - (1/s) )^2
ptau <- tau / sum( tau ) * 100
barplot(ptau, col = "darkred", ylim = c(0, 75), main = "Gráfico 2: Modif. Rate")
## Usando modif.rate() del paquete GDAtools:
# ptau <- modif.rate(acm)$modif[, 1]
## Haciendo las cuentas uno mismo:
s <- ncol(DatosCualisali)
l <- acmSali$eig[acmSali$eig[,1] > 1/s, 1]
tau <- ( s / (s - 1) )^2 * ( l - (1/s) )^2
ptau <- tau / sum( tau ) * 100
barplot(ptau, col="darkred", ylim = c(0,75))
# Creamos un data frame para usar con ggplot2
barplot_df <- data.frame(Indice = factor(1:length(ptau)), Valor = ptau)
# Creamos el gráfico de barras con ggplot2
barplot_gg <- ggplot(barplot_df, aes(x = Indice, y = Valor)) +
geom_bar(stat = "identity", fill = "darkred") +
ylim(0, 75) +
labs(x = "Componentes", y = "Porcentaje de varianza explicada") +
theme_minimal() +
ggtitle("Porcentaje de varianza explicada por cada componente")
barplot_gg
# Creamos el gráfico de barras con ggplot2
barplot_gg <- ggplot(barplot_df, aes(x = Indice, y = Valor)) +
geom_bar(stat = "identity", fill = "darkred") +
ylim(0, 100) +
labs(x = "Componentes", y = "Porcentaje de varianza explicada") +
theme_minimal() +
ggtitle("Porcentaje de varianza explicada por cada componente")
barplot_gg
# Creamos el gráfico de barras con ggplot2
barplot_gg <- ggplot(barplot_df, aes(x = Indice, y = Valor)) +
geom_bar(stat = "identity", fill = "darkred") +
ylim(0, max(barplot_df$Valor+10)) +
labs(x = "Componentes", y = "Porcentaje de varianza explicada") +
theme_minimal() +
ggtitle("Porcentaje de varianza explicada por cada componente")
barplot_gg
grid.arrange(screeplot, barplot_gg, ncol = 1)
# Creamos el gráfico de barras con ggplot2
barplot_gg <- ggplot(barplot_df, aes(x = Indice, y = Valor)) +
geom_bar(stat = "identity", fill = "darkred") +
ylim(0, max(barplot_df$Valor+10)) +
labs(x = "Ejes", y = expression(tau(expression(lambda)))) +
theme_minimal() +
ggtitle("Criterio de Benzécri")
grid.arrange(screeplot, barplot_gg, ncol = 1)
barplot_gg
# Creamos el gráfico de barras con ggplot2
barplot_gg <- ggplot(barplot_df, aes(x = Indice, y = Valor)) +
geom_bar(stat = "identity", fill = "darkred") +
ylim(0, max(barplot_df$Valor+10)) +
labs(x = "Ejes", y = expression(tau(lambda))) +
theme_minimal() +
ggtitle("Criterio de Benzécri")
barplot_gg
grid.arrange(screeplot, barplot_gg, ncol = 1)
screeplot <- fviz_screeplot(acm, addlabels = TRUE, ylim = c(0, 20)) +  ggtitle("Scree Plot") + theme_minimal()+ylab("Porcentaje de varianza explicada")+xlab("Ejes")
screeplot
grid.arrange(screeplot, barplot_gg, ncol = 1)
screeplot <- fviz_screeplot(acmIntra, addlabels = TRUE, ylim = c(0, 20)) +  ggtitle("Scree Plot") + theme_minimal()+ylab("Porcentaje de varianza explicada")+xlab("Ejes")
## Usando modif.rate() del paquete GDAtools:
# ptau <- modif.rate(acm)$modif[, 1]
## Haciendo las cuentas uno mismo:
s <- ncol(DatosCualieco)
l <- acmEco$eig[acmEco$eig[,1] > 1/s, 1]
tau <- ( s / (s - 1) )^2 * ( l - (1/s) )^2
ptau <- tau / sum( tau ) * 100
# Creamos un data frame para usar con ggplot2
barplot_df <- data.frame(Indice = factor(1:length(ptau)), Valor = ptau)
# Creamos el gráfico de barras con ggplot2
barplot_gg <- ggplot(barplot_df, aes(x = Indice, y = Valor)) +
geom_bar(stat = "identity", fill = "darkred") +
ylim(0, max(barplot_df$Valor+10)) +
labs(x = "Ejes", y = expression(tau(lambda))) +
theme_minimal() +
ggtitle("Criterio de Benzécri")
grid.arrange(screeplot, barplot_gg, ncol = 1)
screeplot <- fviz_screeplot(acmIntra, addlabels = TRUE, ylim = c(0, 20)) +  ggtitle("Scree Plot") + theme_minimal()+ylab("Porcentaje de varianza explicada")+xlab("Ejes")
## Usando modif.rate() del paquete GDAtools:
# ptau <- modif.rate(acm)$modif[, 1]
## Haciendo las cuentas uno mismo:
s <- ncol(DatosCualiIntra)
l <- acmEco$eig[acmIntra$eig[,1] > 1/s, 1]
screeplot <- fviz_screeplot(acmIntra, addlabels = TRUE, ylim = c(0, 20)) +  ggtitle("Scree Plot") + theme_minimal()+ylab("Porcentaje de varianza explicada")+xlab("Ejes")
## Usando modif.rate() del paquete GDAtools:
# ptau <- modif.rate(acm)$modif[, 1]
## Haciendo las cuentas uno mismo:
s <- ncol(DatosCualiIntra)
l <- acmIntra$eig[acmIntra$eig[,1] > 1/s, 1]
tau <- ( s / (s - 1) )^2 * ( l - (1/s) )^2
ptau <- tau / sum( tau ) * 100
# Creamos un data frame para usar con ggplot2
barplot_df <- data.frame(Indice = factor(1:length(ptau)), Valor = ptau)
# Creamos el gráfico de barras con ggplot2
barplot_gg <- ggplot(barplot_df, aes(x = Indice, y = Valor)) +
geom_bar(stat = "identity", fill = "darkred") +
ylim(0, max(barplot_df$Valor+10)) +
labs(x = "Ejes", y = expression(tau(lambda))) +
theme_minimal() +
ggtitle("Criterio de Benzécri")
grid.arrange(screeplot, barplot_gg, ncol = 1)
screeplot <- fviz_screeplot(acmDeli, addlabels = TRUE, ylim = c(0, 20)) +  ggtitle("Scree Plot") + theme_minimal()+ylab("Porcentaje de varianza explicada")+xlab("Ejes")
## Usando modif.rate() del paquete GDAtools:
# ptau <- modif.rate(acm)$modif[, 1]
## Haciendo las cuentas uno mismo:
s <- ncol(DatosCualiDeli)
l <- acmDeli$eig[acmDeli$eig[,1] > 1/s, 1]
tau <- ( s / (s - 1) )^2 * ( l - (1/s) )^2
ptau <- tau / sum( tau ) * 100
# Creamos un data frame para usar con ggplot2
barplot_df <- data.frame(Indice = factor(1:length(ptau)), Valor = ptau)
# Creamos el gráfico de barras con ggplot2
barplot_gg <- ggplot(barplot_df, aes(x = Indice, y = Valor)) +
geom_bar(stat = "identity", fill = "darkred") +
ylim(0, max(barplot_df$Valor+10)) +
labs(x = "Ejes", y = expression(tau(lambda))) +
theme_minimal() +
ggtitle("Criterio de Benzécri")
grid.arrange(screeplot, barplot_gg, ncol = 1)
screeplot <- fviz_screeplot(acmEco, addlabels = TRUE, ylim = c(0, 20)) +  ggtitle("Scree Plot") + theme_minimal()+ylab("Porcentaje de varianza explicada")+xlab("Ejes")
## Usando modif.rate() del paquete GDAtools:
# ptau <- modif.rate(acm)$modif[, 1]
## Haciendo las cuentas uno mismo:
s <- ncol(DatosCualieco)
l <- acmEco$eig[acmEco$eig[,1] > 1/s, 1]
tau <- ( s / (s - 1) )^2 * ( l - (1/s) )^2
ptau <- tau / sum( tau ) * 100
# Creamos un data frame para usar con ggplot2
barplot_df <- data.frame(Indice = factor(1:length(ptau)), Valor = ptau)
# Creamos el gráfico de barras con ggplot2
barplot_gg <- ggplot(barplot_df, aes(x = Indice, y = Valor)) +
geom_bar(stat = "identity", fill = "darkred") +
ylim(0, max(barplot_df$Valor+10)) +
labs(x = "Ejes", y = expression(tau(lambda))) +
theme_minimal() +
ggtitle("Criterio de Benzécri")
grid.arrange(screeplot, barplot_gg, ncol = 1)
screeplot <- fviz_screeplot(acmSoc, addlabels = TRUE, ylim = c(0, 20)) +  ggtitle("Scree Plot") + theme_minimal()+ylab("Porcentaje de varianza explicada")+xlab("Ejes")
## Usando modif.rate() del paquete GDAtools:
# ptau <- modif.rate(acm)$modif[, 1]
## Haciendo las cuentas uno mismo:
s <- ncol(DatosCualiSoc)
l <- acmSoc$eig[acmSoc$eig[,1] > 1/s, 1]
tau <- ( s / (s - 1) )^2 * ( l - (1/s) )^2
ptau <- tau / sum( tau ) * 100
# Creamos un data frame para usar con ggplot2
barplot_df <- data.frame(Indice = factor(1:length(ptau)), Valor = ptau)
# Creamos el gráfico de barras con ggplot2
barplot_gg <- ggplot(barplot_df, aes(x = Indice, y = Valor)) +
geom_bar(stat = "identity", fill = "darkred") +
ylim(0, max(barplot_df$Valor+10)) +
labs(x = "Ejes", y = expression(tau(lambda))) +
theme_minimal() +
ggtitle("Criterio de Benzécri")
grid.arrange(screeplot, barplot_gg, ncol = 1)
screeplot <- fviz_screeplot(acm, addlabels = TRUE, ylim = c(0, 20)) +  ggtitle("Scree Plot") + theme_minimal()+ylab("Porcentaje de varianza explicada")+xlab("Ejes")
## Usando modif.rate() del paquete GDAtools:
# ptau <- modif.rate(acm)$modif[, 1]
## Haciendo las cuentas uno mismo:
s <- ncol(DatosCualitativos)
l <- acm$eig[acm$eig[,1] > 1/s, 1]
tau <- ( s / (s - 1) )^2 * ( l - (1/s) )^2
ptau <- tau / sum( tau ) * 100
# Creamos un data frame para usar con ggplot2
barplot_df <- data.frame(Indice = factor(1:length(ptau)), Valor = ptau)
# Creamos el gráfico de barras con ggplot2
barplot_gg <- ggplot(barplot_df, aes(x = Indice, y = Valor)) +
geom_bar(stat = "identity", fill = "darkred") +
ylim(0, max(barplot_df$Valor+10)) +
labs(x = "Ejes", y = expression(tau(lambda))) +
theme_minimal() +
ggtitle("Criterio de Benzécri")
grid.arrange(screeplot, barplot_gg, ncol = 1)
#| fig-cap: ''
#| fig-align: 'center'
#| fig-width: 5.5
#| fig-height: 5
#| echo: false
fviz_mca_var_interactive(acmSoc,col.var = "cos2", axes=c(4,5), repel = TRUE,  ggtheme=theme_minimal())
#| fig-cap: ''
#| fig-align: 'center'
#| fig-width: 5.5
#| fig-height: 5
#| echo: false
fviz_mca_var_interactive(acmSoc,col.var = "var2", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
axes=c(4,5), repel = TRUE,  ggtheme=theme_minimal())
fviz_mca_var(acmSoc,col.var = "var2", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
axes=c(4,5), repel = TRUE,  ggtheme=theme_minimal())
fviz_mca_var(acmSoc,col.var = "cos2", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
axes=c(4,5), repel = TRUE,  ggtheme=theme_minimal())
fviz_mca_var(acmSoc,col.var = "cos2", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
axes=c(4,5), repel = TRUE,label="none",  ggtheme=theme_minimal())
#| fig-cap: ''
#| fig-align: 'center'
#| fig-width: 5.5
#| fig-height: 5
#| echo: false
fviz_mca_var_interactive(acmSoc,col.var = "cos2", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
axes=c(4,5), repel = TRUE,  ggtheme=theme_minimal())
et_mca_var(acm)$cos2[, axes[1]]
get_mca_var(acm)$cos2[, axes[1]]
a<-get_mca_var(acm)$cos2
View(a)
a<-get_mca_var(acm)$cos2[[,axes[1]]]
a<-get_mca_var(acm)$cos2[,axes[1]]
b<-get_mca_var(acm)$cos2[,axes[1]]
a<-get_mca_var(acm)$cos2
View(a)
axes[1]
var_data_df$Color <- get_mca_var(acm)$cos2[, axes[1]]
var_data_df$Color <- get_mca_var(acm)$cos2[, axes[1]]
# Extrae las coordenadas y nombres de las variables (categorías)
var_data <- acm$var$coord
var_data_df <- data.frame(var_data)
var_data_df$Variable <- rownames(var_data_df)
var_data_df$Color <- get_mca_var(acm)$cos2[, axes[1]]
p <- ggplot(var_data_df, aes(x = !!sym(colnames(var_data_df)[axes[1]]),
y = !!sym(colnames(var_data_df)[axes[2]]),
text = Variable, color = Color)) +
geom_point(size = 0.75, shape = 25, color = "red", fill = "red") +
theme_minimal() +
scale_color_gradientn(colors = gradient.cols) +
labs(x = paste0("Dim ", axes[1], " (", var_explained_x, "%)"),
y = paste0("Dim ", axes[2], " (", var_explained_y, "%)"))
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07")
var_data_df$Color <- get_mca_var(acm)$cos2[, axes[1]]
p <- ggplot(var_data_df, aes(x = !!sym(colnames(var_data_df)[axes[1]]),
y = !!sym(colnames(var_data_df)[axes[2]]),
text = Variable, color = Color)) +
geom_point(size = 0.75, shape = 25, color = "red", fill = "red") +
theme_minimal() +
scale_color_gradientn(colors = gradient.cols) +
labs(x = paste0("Dim ", axes[1], " (", var_explained_x, "%)"),
y = paste0("Dim ", axes[2], " (", var_explained_y, "%)"))
# Calcula la varianza explicada para los ejes seleccionados
eigenvalues <- acm$eig
var_explained_x <- round(eigenvalues[axes[1], 2], 2)
var_explained_y <- round(eigenvalues[axes[2], 2], 2)
p <- ggplot(var_data_df, aes(x = !!sym(colnames(var_data_df)[axes[1]]),
y = !!sym(colnames(var_data_df)[axes[2]]),
text = Variable, color = Color)) +
geom_point(size = 0.75, shape = 25, color = "red", fill = "red") +
theme_minimal() +
scale_color_gradientn(colors = gradient.cols) +
labs(x = paste0("Dim ", axes[1], " (", var_explained_x, "%)"),
y = paste0("Dim ", axes[2], " (", var_explained_y, "%)"))
p
var="cos2"
if (col.var == "cos2") {
var_data_df$Color <- get_mca_var(acm)$cos2[, axes[1]]
p <- ggplot(var_data_df, aes(x = !!sym(colnames(var_data_df)[axes[1]]),
y = !!sym(colnames(var_data_df)[axes[2]]),
text = Variable, color = Color)) +
geom_point(size = 0.75, shape = 25, fill = "red") +  # Aquí removemos 'color = "red"'
theme_minimal() +
scale_color_gradientn(colors = gradient.cols) +  # Aplica el gradiente de colores
labs(x = paste0("Dim ", axes[1], " (", var_explained_x, "%)"),
y = paste0("Dim ", axes[2], " (", var_explained_y, "%)"))
}
col.var="cos2"
if (col.var == "cos2") {
var_data_df$Color <- get_mca_var(acm)$cos2[, axes[1]]
p <- ggplot(var_data_df, aes(x = !!sym(colnames(var_data_df)[axes[1]]),
y = !!sym(colnames(var_data_df)[axes[2]]),
text = Variable, color = Color)) +
geom_point(size = 0.75, shape = 25, fill = "red") +  # Aquí removemos 'color = "red"'
theme_minimal() +
scale_color_gradientn(colors = gradient.cols) +  # Aplica el gradiente de colores
labs(x = paste0("Dim ", axes[1], " (", var_explained_x, "%)"),
y = paste0("Dim ", axes[2], " (", var_explained_y, "%)"))
}
p
# Calcula la varianza explicada para los ejes seleccionados
eigenvalues <- acm$eig
var_explained_x <- round(eigenvalues[axes[1], 2], 2)
var_explained_y <- round(eigenvalues[axes[2], 2], 2)
# Extrae las coordenadas y nombres de las variables (categorías)
var_data <- acm$var$coord
var_data_df <- data.frame(var_data)
var_data_df$Variable <- rownames(var_data_df)
# Añade la columna correspondiente al color si se usa col.var como en la función original
if (col.var == "cos2") {
var_data_df$Color <- get_mca_var(acm)$cos2[, axes[1]]
p <- ggplot(var_data_df, aes(x = !!sym(colnames(var_data_df)[axes[1]]),
y = !!sym(colnames(var_data_df)[axes[2]]),
text = Variable, color = Color)) +
geom_point(size = 0.75, shape = 25, fill = "red") +  # Aquí removemos 'color = "red"'
theme_minimal() +
scale_color_gradientn(colors = gradient.cols) +  # Aplica el gradiente de colores
labs(x = paste0("Dim ", axes[1], " (", var_explained_x, "%)"),
y = paste0("Dim ", axes[2], " (", var_explained_y, "%)"))
} else {
# Usa un color fijo si no se especifica un gradiente
p <- ggplot(var_data_df, aes(x = !!sym(colnames(var_data_df)[axes[1]]),
y = !!sym(colnames(var_data_df)[axes[2]]),
text = Variable)) +
geom_point(size = 0.75, shape = 25, color = "red", fill = "red") +
theme_minimal() +
labs(x = paste0("Dim ", axes[1], " (", var_explained_x, "%)"),
y = paste0("Dim ", axes[2], " (", var_explained_y, "%)"))
}
# Agrega las líneas punteadas centradas en el plano cartesiano
p <- p +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray") +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray")
# Conviértelo en un gráfico interactivo con plotly
plotly_obj <- ggplotly(p, tooltip = "text")
plotly_obj
#| fig-cap: ''
#| fig-align: 'center'
#| fig-width: 5.5
#| fig-height: 5
#| echo: false
fviz_mca_var_interactive(acmSoc,col.var = "cos2", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
axes=c(4,5), repel = TRUE,  ggtheme=theme_minimal())
#fviz_mca_var(acmSoc,col.var = "cos2", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"), axes=c(4,5), repel = TRUE,label="none",  ggtheme=theme_minimal())
#| label: Tabla-Burt
#| echo: false
#| warning: false
#| output: false
#Z <- as.matrix(Z)
#(B <- t(Z) %*% Z)
fviz_mca_var_interactive <- function(acm, axes = c(1, 2), repel = TRUE, ggtheme = theme_minimal(),
col.var = "blue", gradient.cols = NULL) {
# Calcula la varianza explicada para los ejes seleccionados
eigenvalues <- acm$eig
var_explained_x <- round(eigenvalues[axes[1], 2], 2)
var_explained_y <- round(eigenvalues[axes[2], 2], 2)
# Extrae las coordenadas y nombres de las variables (categorías)
var_data <- acm$var$coord
var_data_df <- data.frame(var_data)
var_data_df$Variable <- rownames(var_data_df)
# Añade la columna correspondiente al color si se usa col.var como en la función original
if (col.var == "cos2") {
var_data_df$Color <- get_mca_var(acm)$cos2[, axes[1]]
p <- ggplot(var_data_df, aes(x = !!sym(colnames(var_data_df)[axes[1]]),
y = !!sym(colnames(var_data_df)[axes[2]]),
text = Variable, color = Color)) +
geom_point(size = 0.75, shape = 25, fill = "red") +  # Aquí removemos 'color = "red"'
theme_minimal() +
scale_color_gradientn(colors = gradient.cols) +  # Aplica el gradiente de colores
labs(x = paste0("Dim ", axes[1], " (", var_explained_x, "%)"),
y = paste0("Dim ", axes[2], " (", var_explained_y, "%)"))
} else {
# Usa un color fijo si no se especifica un gradiente
p <- ggplot(var_data_df, aes(x = !!sym(colnames(var_data_df)[axes[1]]),
y = !!sym(colnames(var_data_df)[axes[2]]),
text = Variable)) +
geom_point(size = 0.75, shape = 25, color = "red", fill = "red") +
theme_minimal() +
labs(x = paste0("Dim ", axes[1], " (", var_explained_x, "%)"),
y = paste0("Dim ", axes[2], " (", var_explained_y, "%)"))
}
# Agrega las líneas punteadas centradas en el plano cartesiano
p <- p +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray") +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray")
# Conviértelo en un gráfico interactivo con plotly
plotly_obj <- ggplotly(p, tooltip = "text")
# Retorna el gráfico interactivo
return(plotly_obj)
}
#| fig-cap: ''
#| fig-align: 'center'
#| fig-width: 5.5
#| fig-height: 5
#| echo: false
fviz_mca_var_interactive(acmSoc,col.var = "cos2", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
axes=c(4,5), repel = TRUE,  ggtheme=theme_minimal())
#fviz_mca_var(acmSoc,col.var = "cos2", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"), axes=c(4,5), repel = TRUE,label="none",  ggtheme=theme_minimal())
#| fig-cap: ''
#| fig-align: 'center'
#| fig-width: 5.5
#| fig-height: 5
#| echo: false
fviz_mca_var_interactive(acmSoc,col.var = "cos2", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
axes=c(1,2), repel = TRUE,  ggtheme=theme_minimal())
#| fig-cap: ''
#| fig-align: 'center'
#| fig-width: 5.5
#| fig-height: 5
#| echo: false
fviz_mca_var_interactive(acmSoc,col.var = "cos2", gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
axes=c(3,4), repel = TRUE,  ggtheme=theme_minimal())
fviz_mca_biplot(acm, axes=c(1,2),
repel = TRUE, label = "var",
ggtheme=theme_minimal())
fviz_mca_biplot(acm, axes=c(1,2),
repel = TRUE, label = "none",
ggtheme=theme_minimal())
fviz_mca_biplot(acmIntra, axes=c(1,2),
repel = TRUE, label = "none",
ggtheme=theme_minimal())
fviz_mca_biplot(acmIntra, axes=c(4,5),
repel = TRUE, label = "none",
ggtheme=theme_minimal())
fviz_mca_var(acm, axes = c(1,2),
choice = "mca.cor", repel = TRUE,
ggtheme = theme_minimal())
